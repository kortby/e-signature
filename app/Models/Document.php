<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Database\Eloquent\SoftDeletes;

class Document extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'user_id',
        'document_template_id', // New
        'title',
        'original_filename', // May not be needed if using template's PDF
        'storage_path', // This will point to the template's PDF. Instance-specific PDFs are not generated by default.
        'status',
        'recipient_name', // New (example prefill)
        'recipient_email', // New (example prefill/tracking)
        'prefilled_data', // New: Store all prefill data as JSON
    ];

    // Add this cast if you add a prefilled_data JSON column
    protected $casts = [
        'prefilled_data' => 'array',
    ];

    /**
     * Get the user who owns/initiated the document.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * The template this document was created from (if any).
     */
    public function documentTemplate(): BelongsTo
    {
        return $this->belongsTo(DocumentTemplate::class);
    }

    /**
     * Get all pages for this document.
     * (These are still DocumentPage records, which store the image paths)
     */
    public function pages(): HasMany
    {
        return $this->hasMany(DocumentPage::class)->orderBy('page_number');
    }

    /**
     * Get all signable inputs for this document instance.
     */
    public function signableInputs() // This is correct. Each document instance has its own set of signable inputs.
    {
        // This relationship should be directly to SignableInput records that belong to this document's pages.
        // When a document is created from a template, you will iterate through the template's TemplateFields
        // and create corresponding SignableInput records for the new Document instance.
        // Each SignableInput will reference a DocumentPage (which itself refers to the Document).
        return $this->hasManyThrough(SignableInput::class, DocumentPage::class);
    }

    /**
     * The envelopes that this document belongs to.
     */
    public function envelopes(): BelongsToMany
    {
        return $this->belongsToMany(Envelope::class, 'document_envelope')
            ->withPivot('order')
            ->withTimestamps();
    }
}
